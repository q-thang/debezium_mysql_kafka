version: '3'
services:
  kibana:
    image: docker.elastic.co/kibana/kibana:7.4.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - "./kibana.yml:/usr/share/kibana/config/kibana.yml"
    restart: unless-stopped
    ports:
      - "5601:5601"
    container_name: kibana
    depends_on:
      - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    container_name: elasticsearch
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - "./esdata:/var/lib/elasticsearch/data"
    ports:
      - "9200:9200"

  logstash:
    image: docker.elastic.co/logstash/logstash:7.4.0
    volumes:
      - "./logstash.conf:/config-dir/logstash.conf"
    restart: unless-stopped
    command: logstash -f /config-dir/logstash.conf
    ports:
      - "9600:9600"
      - "7777:7777"
    container_name: logstash
    depends_on:
      - elasticsearch
      - kafka1
      - kafka2
      - kafka3

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:latest
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
    restart: unless-stopped
    depends_on:
      - zookeeper

  kafka2:
    image: confluentinc/cp-kafka:latest
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
    restart: unless-stopped
    depends_on:
      - zookeeper

  kafka3:
    image: confluentinc/cp-kafka:latest
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
    restart: unless-stopped
    depends_on:
      - zookeeper

  mysql:
    image: mysql:8.0
    ports:
     - "3307:3306"
    restart: unless-stopped
    environment:
     - MYSQL_ROOT_PASSWORD=${PW}
     - LANG=C.UTF-8
    container_name: mysql_kafka
    volumes:
      - ./db/data:/var/lib/mysql
      - ./db/logistic.sql:/docker-entrypoint-initdb.d/logistic.sql

  connect:
    image: debezium/connect:2.0
    ports:
     - "8083:8083"
    environment:
     - BOOTSTRAP_SERVERS=${BOOTSTRAP_SERVERS}
     - GROUP_ID=1
     - CONFIG_STORAGE_TOPIC=${CONFIG_STORAGE_TOPIC}
     - OFFSET_STORAGE_TOPIC=${OFFSET_STORAGE_TOPIC}
     - STATUS_STORAGE_TOPIC=${STATUS_STORAGE_TOPIC}
    container_name: debezium
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - mysql
    restart: unless-stopped

  manager:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=${BOOTSTRAP_SERVERS}
    container_name: ui_kafka
    restart: unless-stopped
    depends_on:
      - zookeeper

  app:
    build: ./app
    ports:
      - "5000:5000"
    volumes:
      - ./app/:/app
    restart: always
    container_name: app

  server:
    build: ./server
    ports:
      - "8080:8080"
    volumes:
      - ./server:/server
      - /server/node_modules
    restart: always
    container_name: server

  redis:
    image: redis:6.2-alpine
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    volumes:
      - ./app/cache:/data
    restart: always
    container_name: redis
